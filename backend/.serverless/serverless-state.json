{
  "service": {
    "service": "my-express-on-lambda",
    "serviceObject": {
      "name": "my-express-on-lambda"
    },
    "provider": {
      "name": "aws",
      "profile": "myprofile",
      "runtime": "nodejs20.x",
      "region": "us-east-1",
      "timeout": 15,
      "memorySize": 512,
      "httpApi": {
        "cors": {
          "allowedOrigins": [
            "https://dxjoq4rbyosiu.cloudfront.net"
          ],
          "allowedHeaders": [
            "content-type",
            "authorization"
          ],
          "allowedMethods": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "OPTIONS"
          ]
        }
      },
      "environment": {
        "MONGODB_URL": "mongodb+srv://krzepka33:KmBEsHei33BWtrra@cluster0.vs02dna.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0",
        "JWT_SECRET": "67dcea080ba59fb5194c465ea0aac4272b9fc8e55f781b130bc3427449b8c2a4"
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/my-express-on-lambda-dev-api"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "my-express-on-lambda",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/my-express-on-lambda-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/my-express-on-lambda-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "my-express-on-lambda",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-fa657a83-0760",
                "S3Key": "serverless/my-express-on-lambda/dev/1756285618727-2025-08-27T09:06:58.727Z/my-express-on-lambda.zip"
              },
              "Handler": "lambda.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "my-express-on-lambda-dev-api",
              "MemorySize": 512,
              "Timeout": 15,
              "Environment": {
                "Variables": {
                  "MONGODB_URL": "mongodb+srv://krzepka33:KmBEsHei33BWtrra@cluster0.vs02dna.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0",
                  "JWT_SECRET": "67dcea080ba59fb5194c465ea0aac4272b9fc8e55f781b130bc3427449b8c2a4",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ApiLogGroup"
            ]
          },
          "ApiLambdaVersionA4Qf0DcR4IiDrkWszpDAS5QcFIhtH3Q8axt1qFpjg9E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ApiLambdaFunction"
              },
              "CodeSha256": "DmIC3Pgh6vSKUm/a9RQ5+cDo2dWCSxT6E0ywM1+JwKg="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-my-express-on-lambda",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowHeaders": [
                  "content-type",
                  "authorization"
                ],
                "AllowMethods": [
                  "GET",
                  "POST",
                  "PUT",
                  "DELETE",
                  "OPTIONS"
                ],
                "AllowOrigins": [
                  "https://dxjoq4rbyosiu.cloudfront.net"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "ApiLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationApi": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteAny": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "ANY /",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "HttpApiRouteAnyProxyVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "ANY /{proxy+}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-fa657a83-0760",
            "Export": {
              "Name": "sls-my-express-on-lambda-dev-ServerlessDeploymentBucketName"
            }
          },
          "ApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ApiLambdaVersionA4Qf0DcR4IiDrkWszpDAS5QcFIhtH3Q8axt1qFpjg9E"
            },
            "Export": {
              "Name": "sls-my-express-on-lambda-dev-ApiLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-my-express-on-lambda-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-my-express-on-lambda-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "api": {
        "handler": "lambda.handler",
        "events": [
          {
            "httpApi": {
              "method": "ANY",
              "path": "/"
            },
            "resolvedMethod": "ANY",
            "resolvedPath": "/"
          },
          {
            "httpApi": {
              "method": "ANY",
              "path": "/{proxy+}"
            },
            "resolvedMethod": "ANY",
            "resolvedPath": "/{proxy+}"
          }
        ],
        "name": "my-express-on-lambda-dev-api",
        "environment": {
          "NODE_OPTIONS": "--enable-source-maps"
        },
        "package": {},
        "memory": 512,
        "timeout": 15,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ApiLambdaVersionA4Qf0DcR4IiDrkWszpDAS5QcFIhtH3Q8axt1qFpjg9E"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless",
    "initialServerlessConfig": {
      "useDotenv": true,
      "org": "w64191",
      "service": "my-express-on-lambda",
      "frameworkVersion": "4",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "build": {
        "esbuild": true,
        "format": "cjs",
        "platform": "node",
        "minify": true,
        "sourcemap": true,
        "target": "node20",
        "keepNames": true,
        "external": [
          "aws-sdk"
        ],
        "loader": {
          ".json": "json"
        }
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "package": {
        "patterns": [
          "swagger.json"
        ],
        "artifactsS3KeyDirname": "serverless/my-express-on-lambda/dev/code-artifacts",
        "deploymentBucket": "serverless-framework-deployments-us-east-1-fa657a83-0760",
        "artifact": "/home/kubar/work/studia/blog-aws/backend/.serverless/build/my-express-on-lambda.zip",
        "artifactDirectoryName": "serverless/my-express-on-lambda/dev/1756285618727-2025-08-27T09:06:58.727Z"
      }
    },
    "appId": null,
    "org": "w64191",
    "orgId": null,
    "build": {
      "$ref": "$[\"service\"][\"initialServerlessConfig\"][\"build\"]"
    },
    "layers": {}
  },
  "package": {
    "artifactDirectoryName": "serverless/my-express-on-lambda/dev/1756285618727-2025-08-27T09:06:58.727Z",
    "artifact": "my-express-on-lambda.zip"
  }
}